import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Container, Table, Spinner, Alert, Form
} from 'react-bootstrap';
import { useSelector } from 'react-redux';

export default function AdminOrders() {
  const { token } = useSelector(state => state.auth);
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const fetchOrders = async () => {
    try {
      const res = await axios.get('http://localhost:5000/api/orders/admin', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      setOrders(res.data);
    } catch (err) {
      setError(err.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await axios.put(`http://localhost:5000/api/orders/${orderId}/status`, {
        status: newStatus
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchOrders(); // refresh l·∫°i danh s√°ch
    } catch (err) {
      alert('C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i!');
    }
  };

  return (
    <Container className="mt-5">
      <h2 className="mb-4">üìã Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
      {loading && <Spinner animation="border" />}
      {error && <Alert variant="danger">{error}</Alert>}
      {!loading && orders.length === 0 && <Alert variant="info">Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</Alert>}
      {!loading && orders.length > 0 && (
        <Table bordered hover responsive>
          <thead>
            <tr>
              <th>Ng∆∞·ªùi ƒë·∫∑t</th>
              <th>Ng√†y ƒë·∫∑t</th>
              <th>S·∫£n ph·∫©m</th>
              <th>Tr·∫°ng th√°i</th>
              <th>T·ªïng ti·ªÅn</th>
            </tr>
          </thead>
          <tbody>
            {orders.map(order => (
              <tr key={order._id}>
                <td>{order.user?.name || '·∫®n'}</td>
                <td>{new Date(order.createdAt).toLocaleString()}</td>
                <td>
                  {order.items.map(item => (
                    <div key={item.name}>
                      {item.name} ({item.size}) x {item.quantity}
                    </div>
                  ))}
                </td>
                <td>
                  <Form.Select
                    value={order.status}
                    onChange={(e) => handleStatusChange(order._id, e.target.value)}
                  >
                    <option>Ch·ªù x·ª≠ l√Ω</option>
                    <option>ƒêang giao</option>
                    <option>Ho√†n th√†nh</option>
                    <option>ƒê√£ hu·ª∑</option>
                  </Form.Select>
                </td>
                <td>
                  {order.items.reduce((sum, item) => sum + item.quantity * item.price, 0).toLocaleString()}ƒë
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}
    </Container>
  );
}
